$date
	Tue May 28 10:26:11 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module alu_tb $end
$scope module alu_test $end
$var wire 8 ! Data1 [7:0] $end
$var wire 8 " Data2 [7:0] $end
$var wire 3 # Select [2:0] $end
$var wire 8 $ orWire [7:0] $end
$var wire 8 % forwardWire [7:0] $end
$var wire 8 & andWire [7:0] $end
$var wire 8 ' addWire [7:0] $end
$var reg 8 ( Result [7:0] $end
$scope module addUnit $end
$var wire 8 ) Data1 [7:0] $end
$var wire 8 * Data2 [7:0] $end
$var wire 8 + Result [7:0] $end
$upscope $end
$scope module andUnit $end
$var wire 8 , Data1 [7:0] $end
$var wire 8 - Data2 [7:0] $end
$var wire 8 . Result [7:0] $end
$upscope $end
$scope module forwardUnit $end
$var wire 8 / Data2 [7:0] $end
$var wire 8 0 Result [7:0] $end
$upscope $end
$scope module orUnit $end
$var wire 8 1 Data1 [7:0] $end
$var wire 8 2 Data2 [7:0] $end
$var wire 8 3 Result [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 3
b111 2
b101 1
bx 0
b111 /
bx .
b111 -
b101 ,
bx +
b111 *
b101 )
bx (
bx '
bx &
bx %
bx $
b0 #
b111 "
b101 !
$end
#1
b111 (
b111 $
b111 3
b101 &
b101 .
b111 %
b111 0
#2
b1100 '
b1100 +
#5
b1100 (
b1 #
b1010 "
b1010 *
b1010 -
b1010 /
b1010 2
b10100000 !
b10100000 )
b10100000 ,
b10100000 1
#6
b0 &
b0 .
b10101010 $
b10101010 3
b1010 %
b1010 0
#7
b10101010 (
b10101010 '
b10101010 +
#15
b0 (
b10 #
b11101 "
b11101 *
b11101 -
b11101 /
b11101 2
b10101 !
b10101 )
b10101 ,
b10101 1
#16
b10101 (
b10101 &
b10101 .
b11101 $
b11101 3
b11101 %
b11101 0
#17
b110010 '
b110010 +
#30
b11101 (
b11 #
b100100 "
b100100 *
b100100 -
b100100 /
b100100 2
#31
b110101 (
b100 &
b100 .
b110101 $
b110101 3
b100100 %
b100100 0
#32
b111001 '
b111001 +
